import os, json, runpy, shutil
import gradio as gr

def _ensure_status2_map():
    for c in [
        "/content/repo/examples/status2_map.json",
        "/content/colab-merge-project/examples/status2_map.json",
        "examples/status2_map.json",
        "./examples/status2_map.json",
    ]:
        if os.path.exists(c):
            try:
                shutil.copy(c, "/content/status2_map.json")
            except Exception:
                pass
            break

def _run_nbutest(file1, file2, date_str):
    if file1 is None or file2 is None:
        raise gr.Error("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ (CSV/XLSX).")
    if not date_str:
        raise gr.Error("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025).")
    settings = {"files": [file1.name, file2.name], "–ø–æ—Ç–æ—á–Ω–∞–¥–∞—Ç–∞": date_str}
    with open("/content/app_settings.json", "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)
    _ensure_status2_map()
    # Try typical locations
    for p in ["/content/repo/scripts/nbutest.py",
              "/content/colab-merge-project/scripts/nbutest.py",
              "scripts/nbutest.py", "./scripts/nbutest.py"]:
        if os.path.exists(p):
            script_path = p
            break
    else:
        raise gr.Error("–ù–µ –Ω–∞–π–¥–µ–Ω scripts/nbutest.py")
    try:
        runpy.run_path(script_path, run_name="__main__")
    except SystemExit:
        pass
    # Locate output
    outs = [f"/content/result_{date_str}.xlsx", f"result_{date_str}.xlsx"]
    for c in outs:
        if os.path.exists(c):
            return c
    latest = None
    for fn in os.listdir("/content"):
        p = os.path.join("/content", fn)
        if fn.lower().endswith(".xlsx") and fn.startswith("result_"):
            if latest is None or os.path.getmtime(p) > os.path.getmtime(latest):
                latest = p
    if latest:
        return latest
    raise gr.Error("–ò—Ç–æ–≥–æ–≤—ã–π Excel –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ª–æ–≥–∏ (Runtime ‚Üí View logs).")

def launch_app():
    with gr.Blocks() as demo:
        gr.Markdown("### üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ `nbutest.py` (–ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∫–æ–¥ —Å–∫—Ä—ã—Ç)")
        with gr.Row():
            f1 = gr.File(label="–§–∞–π–ª 1 (Excel/CSV)")
            f2 = gr.File(label="–§–∞–π–ª 2 (Excel/CSV)")
        date_input = gr.Textbox(label="–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025")
        go = gr.Button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        out_file = gr.File(label="–†–µ–∑—É–ª—å—Ç–∞—Ç (XLSX)")
        go.click(_run_nbutest, inputs=[f1, f2, date_input], outputs=out_file)
    demo.launch()


# === Original UI fragments preserved below (commented) ===

# --- fragment 1 ---
# # @title üñ•Ô∏è UI: –í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∞–π–ª–∞ –∏ –¥–∞—Ç—É ‚Üí –∑–∞–ø—É—Å–∫ nbutest.py —Å –ª–æ–≥–æ–º
# !pip -q install gradio>=4.0 openpyxl pandas
# 
# import os, json, runpy, shutil, io, traceback, time
# import gradio as gr
# from contextlib import redirect_stdout, redirect_stderr
# 
# # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ status2_map.json –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# EXAMPLES_DIR = '/content/examples'
# os.makedirs(EXAMPLES_DIR, exist_ok=True)
# # –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ –Ω–∞–¥–æ
# for candidate in [
#     '/content/repo/examples/status2_map.json',
#     '/content/colab-merge-project/examples/status2_map.json',
#     'examples/status2_map.json'
# ]:
#     if os.path.exists(candidate):
#         shutil.copy(candidate, '/content/status2_map.json')
#         break
# 
# def run_nbutest(file1, file2, date_str):
#     # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
#     log_buf = io.StringIO()
#     result_path = None
# 
#     try:
#         if file1 is None or file2 is None:
#             raise ValueError('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ (CSV/XLSX).')
#         if not date_str:
#             raise ValueError('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025).')
# 
#         # —Ñ–æ—Ä–º–∏—Ä—É–µ–º app_settings.json –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç
#         settings = {
#             "files": [file1.name, file2.name],
#             "–ø–æ—Ç–æ—á–Ω–∞–¥–∞—Ç–∞": date_str
#         }
#         with open('/content/app_settings.json', 'w', encoding='utf-8') as f:
#             json.dump(settings, f, ensure_ascii=False, indent=2)
# 
#         # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#         print("–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞:", os.getcwd(), file=log_buf)
#         print("–§–∞–π–ª1:", file1.name, file=log_buf)
#         print("–§–∞–π–ª2:", file2.name, file=log_buf)
#         print("–î–∞—Ç–∞:", date_str, file=log_buf)
#         print("status2_map.json exists?:", os.path.exists('/content/status2_map.json'), file=log_buf)
# 
#         # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout/stderr
#         with redirect_stdout(log_buf), redirect_stderr(log_buf):
#             try:
#                 # –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É (–µ—Å–ª–∏ –≤—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–ø–æ –≤ /content/repo)
#                 script_path = '/content/repo/scripts/nbutest.py'
#                 if not os.path.exists(script_path):
#                     # –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–æ—É—Ç–±—É–∫ –∑–∞–ø—É—â–µ–Ω –ø—Ä—è–º–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞
#                     script_path = '/content/colab-merge-project/scripts/nbutest.py'
#                 print("–ó–∞–ø—É—Å–∫:", script_path)
#                 runpy.run_path(script_path, run_name='__main__')
#             except SystemExit:
#                 # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç sys.exit ‚Äî —ç—Ç–æ –æ–∫, —Ñ–∞–π–ª —É–∂–µ –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å—Å—è
#                 pass
# 
#         # –∏—â–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π .xlsx
#         # —á–∞—Å—Ç–æ nbutest.py –ø–∏—à–µ—Ç result_–î–î.–ú–ú.–ì–ì–ì–ì.xlsx
#         candidates = [
#             f"/content/result_{date_str}.xlsx",
#             f"result_{date_str}.xlsx",
#         ]
#         for c in candidates:
#             if os.path.exists(c):
#                 result_path = c
#                 break
#         if result_path is None:
#             # fallback: —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π result_*.xlsx –≤ /content
#             latest = None
#             for fname in os.listdir('/content'):
#                 if fname.lower().endswith('.xlsx') and fname.startswith('result_'):
#                     p = os.path.join('/content', fname)
#                     if latest is None or os.path.getmtime(p) > os.path.getmtime(latest):
#                         latest = p
#             result_path = latest
# 
#         if result_path is None:
#             raise FileNotFoundError("–í—ã—Ö–æ–¥–Ω–æ–π Excel –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –Ω–∏–∂–µ.")
# 
#         return result_path, log_buf.getvalue()
# 
#     except Exception:
#         # –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫ –≤ –ª–æ–≥
#         tb = traceback.format_exc()
#         return None, (log_buf.getvalue() + "\n--- TRACEBACK ---\n" + tb)
# 
# with gr.Blocks() as demo:
#     gr.Markdown(
#         "### üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–µ `scripts/nbutest.py`\n"
#         "–í—ã–±–µ—Ä–∏—Ç–µ **–¥–≤–∞ —Ñ–∞–π–ª–∞** –∏ –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É** (–î–î.–ú–ú.–ì–ì–ì–ì). "
#         "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç `app_settings.json` –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞—à —Å–∫—Ä–∏–ø—Ç. "
#         "–ù–∏–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω—ã–π **–ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**."
#     )
#     with gr.Row():
#         f1 = gr.File(label='–§–∞–π–ª 1 (Excel/CSV)')
#         f2 = gr.File(label='–§–∞–π–ª 2 (Excel/CSV)')
#     date_input = gr.Textbox(label='–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)', placeholder='–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025')
#     go = gr.Button('–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É')
#     out_file = gr.File(label='–†–µ–∑—É–ª—å—Ç–∞—Ç (XLSX)')
#     logs = gr.Textbox(label='–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', lines=18)
#     go.click(run_nbutest, inputs=[f1, f2, date_input], outputs=[out_file, logs])
# 
# demo.launch()
# 
